library(forecast)
# 1. Tạo một chuỗi thời gian từ quá trình WN Gaussian
set.seed(123)
n <- 300
wn <- rnorm(n, mean = 0, sd = sqrt(2))
plot(wn, type = "l", main = "Quá trình tiếng ồn trắng")
acf(wn, main = "Hàm tự tương quan của tiếng ồn trắng")
pacf(wn, main = "Hàm tự tương quan riêng của tiếng ồn trắng")
# 2. Tạo một chuỗi thời gian từ mô hình RW không có hệ số trượt
rw <- cumsum(c(0, rnorm(n-1)))
plot(rw, type = "l", main = "Quá trình bước ngẫu nhiên")
acf(rw, main = "Hàm tự tương quan của bước ngẫu nhiên")
pacf(rw, main = "Hàm tự tương quan riêng của bước ngẫu nhiên")
# 3. Bước ngẫu nhiên với hệ số trượt
rw_drift <- function(n, drift) {
cumsum(c(0, drift + rnorm(n-1)))
}
rw_02 <- rw_drift(n, 0.2)
rw_01 <- rw_drift(n, 0.1)
rw_005 <- rw_drift(n, 0.05)
par(mfrow=c(3,1))
plot(rw_02, type="l", main="Bước ngẫu nhiên với hệ số trượt 0.2")
plot(rw_01, type="l", main="Bước ngẫu nhiên với hệ số trượt 0.1")
plot(rw_005, type="l", main="Bước ngẫu nhiên với hệ số trượt 0.05")
# 4. Hàm tự tương quan và tự tương quan riêng lý thuyết cho các quá trình
# a. AR(1)
ar_models <- list(
arima.sim(n = 300, model = list(ar = 0.35)),
arima.sim(n = 300, model = list(ar = -0.35)),
arima.sim(n = 300, model = list(ar = 0.2)),
arima.sim(n = 300, model = list(ar = 0.8))
)
par(mfrow=c(2,2))
for (i in 1:4) {
Acf(ar_models[[i]], main=paste("AR(1) với phi =", c(0.35, -0.35, 0.2, 0.8)[i]))
}
# b. MA(1)
ma_models <- list(
arima.sim(n = 300, model = list(ma = 0.45)),
arima.sim(n = 300, model = list(ma = -0.45)),
arima.sim(n = 300, model = list(ma = 0.1)),
arima.sim(n = 300, model = list(ma = 0.9))
)
par(mfrow=c(2,2))
for (i in 1:4) {
Acf(ma_models[[i]], main=paste("MA(1) với theta =", c(0.45, -0.45, 0.1, 0.9)[i]))
}
# c. AR(2)
ar2_models <- list(
arima.sim(n = 300, model = list(ar = c(0.55, 0.3))),
arima.sim(n = 300, model = list(ar = c(-0.55, 0.3))),
arima.sim(n = 300, model = list(ar = c(0.55, -0.3))),
arima.sim(n = 300, model = list(ar = c(-0.55, -0.3)))
)
par(mfrow=c(2,2))
for (i in 1:4) {
Acf(ar2_models[[i]], main=paste("AR(2) với phi1,phi2 =",
paste(c("0.55,0.3", "-0.55,0.3", "0.55,-0.3", "-0.55,-0.3")[i])))
}
# d. MA(2)
ma2_models <- list(
arima.sim(n = 300, model = list(ma = c(0.55, 0.3))),
arima.sim(n = 300, model = list(ma = c(-0.55, 0.3)))
)
par(mfrow=c(1,2))
for (i in 1:2) {
Acf(ma2_models[[i]], main=paste("MA(2) với theta1,theta2 =",
c("0.55,0.3", "-0.55,0.3")[i]))
}
# e. ARMA(1,1)
arma_models <- list(
arima.sim(n = 300, model = list(ar = 0.75, ma = -0.4)),
arima.sim(n = 300, model = list(ar = -0.9, ma = 0.5))
)
par(mfrow=c(1,2))
for (i in 1:2) {
Acf(arma_models[[i]], main=paste("ARMA(1,1) với phi,theta =",
c("0.75,-0.4", "-0.9,0.5")[i]))
}
# 5. ARIMA(1,1,0)
arima_model <- arima.sim(n = 150, model = list(order = c(1,1,0), ar = 0.55))
plot(arima_model, main = "ARIMA(1,1,0) với phi = 0.55")
acf(arima_model, main = "Hàm tự tương quan của ARIMA(1,1,0)")
pacf(arima_model, main = "Hàm tự tương quan riêng của ARIMA(1,1,0)")
# Chuỗi sai phân
diff_arima <- diff(arima_model)
plot(diff_arima, main = "Chuỗi sai phân của ARIMA(1,1,0)")
acf(diff_arima, main = "Hàm tự tương quan của chuỗi sai phân ARIMA(1,1,0)")
pacf(diff_arima, main = "Hàm tự tương quan riêng của chuỗi sai phân ARIMA(1,1,0)")
library(forecast)
#Cau 9
# 1. Tạo một chuỗi thời gian từ quá trình WN Gaussian
set.seed(123)
n <- 300
wn <- rnorm(n, mean = 0, sd = sqrt(2))
plot(wn, type = "l", main = "Quá trình tiếng ồn trắng")
acf(wn, main = "Hàm tự tương quan của tiếng ồn trắng")
pacf(wn, main = "Hàm tự tương quan riêng của tiếng ồn trắng")
# 2. Tạo một chuỗi thời gian từ mô hình RW không có hệ số trượt
rw <- cumsum(c(0, rnorm(n-1)))
plot(rw, type = "l", main = "Quá trình bước ngẫu nhiên")
acf(rw, main = "Hàm tự tương quan của bước ngẫu nhiên")
pacf(rw, main = "Hàm tự tương quan riêng của bước ngẫu nhiên")
# 3. Bước ngẫu nhiên với hệ số trượt
rw_drift <- function(n, drift) {
cumsum(c(0, drift + rnorm(n-1)))
}
rw_02 <- rw_drift(n, 0.2)
rw_01 <- rw_drift(n, 0.1)
rw_005 <- rw_drift(n, 0.05)
par(mfrow=c(3,1))
plot(rw_02, type="l", main="Bước ngẫu nhiên với hệ số trượt 0.2")
plot(rw_01, type="l", main="Bước ngẫu nhiên với hệ số trượt 0.1")
plot(rw_005, type="l", main="Bước ngẫu nhiên với hệ số trượt 0.05")
# 4. Hàm tự tương quan và tự tương quan riêng lý thuyết cho các quá trình
# a. AR(1)
ar_models <- list(
arima.sim(n = 300, model = list(ar = 0.35)),
arima.sim(n = 300, model = list(ar = -0.35)),
arima.sim(n = 300, model = list(ar = 0.2)),
arima.sim(n = 300, model = list(ar = 0.8))
)
par(mfrow=c(2,2))
for (i in 1:4) {
Acf(ar_models[[i]], main=paste("AR(1) với phi =", c(0.35, -0.35, 0.2, 0.8)[i]))
}
# b. MA(1)
ma_models <- list(
arima.sim(n = 300, model = list(ma = 0.45)),
arima.sim(n = 300, model = list(ma = -0.45)),
arima.sim(n = 300, model = list(ma = 0.1)),
arima.sim(n = 300, model = list(ma = 0.9))
)
par(mfrow=c(2,2))
for (i in 1:4) {
Acf(ma_models[[i]], main=paste("MA(1) với theta =", c(0.45, -0.45, 0.1, 0.9)[i]))
}
# c. AR(2)
ar2_models <- list(
arima.sim(n = 300, model = list(ar = c(0.55, 0.3))),
arima.sim(n = 300, model = list(ar = c(-0.55, 0.3))),
arima.sim(n = 300, model = list(ar = c(0.55, -0.3))),
arima.sim(n = 300, model = list(ar = c(-0.55, -0.3)))
)
par(mfrow=c(2,2))
for (i in 1:4) {
Acf(ar2_models[[i]], main=paste("AR(2) với phi1,phi2 =",
paste(c("0.55,0.3", "-0.55,0.3", "0.55,-0.3", "-0.55,-0.3")[i])))
}
# d. MA(2)
ma2_models <- list(
arima.sim(n = 300, model = list(ma = c(0.55, 0.3))),
arima.sim(n = 300, model = list(ma = c(-0.55, 0.3)))
)
par(mfrow=c(1,2))
for (i in 1:2) {
Acf(ma2_models[[i]], main=paste("MA(2) với theta1,theta2 =",
c("0.55,0.3", "-0.55,0.3")[i]))
}
# e. ARMA(1,1)
arma_models <- list(
arima.sim(n = 300, model = list(ar = 0.75, ma = -0.4)),
arima.sim(n = 300, model = list(ar = -0.9, ma = 0.5))
)
par(mfrow=c(1,2))
for (i in 1:2) {
Acf(arma_models[[i]], main=paste("ARMA(1,1) với phi,theta =",
c("0.75,-0.4", "-0.9,0.5")[i]))
}
# 5. ARIMA(1,1,0)
arima_model <- arima.sim(n = 150, model = list(order = c(1,1,0), ar = 0.55))
plot(arima_model, main = "ARIMA(1,1,0) với phi = 0.55")
acf(arima_model, main = "Hàm tự tương quan của ARIMA(1,1,0)")
pacf(arima_model, main = "Hàm tự tương quan riêng của ARIMA(1,1,0)")
# Chuỗi sai phân
diff_arima <- diff(arima_model)
plot(diff_arima, main = "Chuỗi sai phân của ARIMA(1,1,0)")
acf(diff_arima, main = "Hàm tự tương quan của chuỗi sai phân ARIMA(1,1,0)")
pacf(diff_arima, main = "Hàm tự tương quan riêng của chuỗi sai phân ARIMA(1,1,0)")
shiny::runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
shiny::runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(DALEXtra)
library(forcats)
# Load the saved model and data
gam.model <- readRDS("gam_model.rds")
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
update.packages(ask = FALSE)
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
shiny::runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
runApp('D:/R Studio/Statistical processing/deploy of seoul bike')
